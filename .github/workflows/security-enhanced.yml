name: Enhanced Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'

# Default permissions - least privilege
permissions:
  contents: read

jobs:
  # OSS-Fuzz for JavaScript fuzzing
  fuzz-testing:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      
    - name: Setup Node.js
      uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af  # v4.1.0
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        PUPPETEER_SKIP_DOWNLOAD: true
        
    - name: Install jazzer.js for fuzzing
      run: npm install --save-dev @jazzer.js/core
      
    - name: Create fuzz tests
      run: |
        mkdir -p fuzz
        cat > fuzz/qr-generation.fuzz.js << 'EOF'
        const { FuzzedDataProvider } = require('@jazzer.js/core');
        
        module.exports.fuzz = function(data) {
          const provider = new FuzzedDataProvider(data);
          
          // Test QR code generation with fuzzy inputs
          try {
            const callsign = provider.consumeString(20);
            const server = provider.consumeString(50);
            const port = provider.consumeIntegralInRange(1, 65535);
            const certPassword = provider.consumeString(30);
            
            // Simulate QR code generation
            const qrData = {
              callsign,
              server,
              port,
              certPassword
            };
            
            // Validate inputs
            if (callsign.includes('<script>') || server.includes('<script>')) {
              throw new Error('XSS attempt detected');
            }
            
            if (port < 1 || port > 65535) {
              throw new Error('Invalid port number');
            }
            
          } catch (e) {
            // Check if it's a security issue
            if (e.message.includes('XSS') || e.message.includes('injection')) {
              throw e;
            }
          }
        };
        EOF
        
    - name: Run fuzz tests
      run: |
        npx jazzer fuzz/qr-generation.fuzz.js --max_total_time=60 || true
      continue-on-error: true

  # Advanced dependency scanning with multiple tools
  advanced-dependency-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      
    - name: Run OSV Scanner
      run: |
        # Install OSV Scanner
        curl -sSfL https://github.com/google/osv-scanner/releases/download/v1.9.1/osv-scanner_linux_amd64 -o osv-scanner
        chmod +x osv-scanner
        
        # Run scan
        ./osv-scanner --format sarif . > osv-results.sarif || true
        
    - name: Upload OSV results
      if: always()
      uses: github/codeql-action/upload-sarif@eb055d739abdc2e8de2e5f4ba1a8b246daa779aa  # v3.26.0
      with:
        sarif_file: osv-results.sarif
        category: osv-scan

  # Supply chain security checks
  supply-chain-security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      
    - name: Generate SBOM
      uses: anchore/sbom-action@61119d458adab75f756bc0b9e4bde25725f86a7a  # v0.17.2
      with:
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b  # v4.5.0
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 30
        
    - name: Check for typosquatting and verify packages
      run: |
        # Verify qrcode package is the legitimate one
        QRCODE_REPO=$(npm view qrcode repository.url 2>/dev/null || echo "")
        if [[ "$QRCODE_REPO" != *"github.com/soldair/node-qrcode"* ]]; then
          echo "ERROR: qrcode package appears to be from wrong source!"
          echo "Expected: github.com/soldair/node-qrcode"
          echo "Got: $QRCODE_REPO"
          exit 1
        fi
        
        # Check for typosquatting patterns in other packages
        npm ls --depth=0 --json 2>/dev/null | jq -r '.dependencies | keys[]' | while read pkg; do
          # Skip our verified packages
          if [ "$pkg" = "qrcode" ]; then
            echo "âœ“ qrcode - verified legitimate package"
            continue
          fi
          
          # Check for suspicious patterns
          if echo "$pkg" | grep -E "(qrcod[^e]|qr-cod|qrcode[0-9]|vit[0-9]|jes[0-9])" > /dev/null; then
            echo "WARNING: Potential typosquatting detected: $pkg"
            exit 1
          fi
        done