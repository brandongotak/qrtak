name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions: read-all

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and quality gates
  security-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        PUPPETEER_SKIP_DOWNLOAD: true
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@907ac64fd42b18dab2ceba2fda39834d3f8ba7e3
      with:
        extra_args: --only-verified

  # Testing
  test:
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        PUPPETEER_SKIP_DOWNLOAD: true
      
    - name: Run tests
      run: npm test
      
    - name: Run tests with coverage
      run: npm test -- --coverage

  # Build and test Docker image
  build-and-test:
    runs-on: ubuntu-latest
    needs: [security-checks, test]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Scan container image
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: github.event_name != 'pull_request' && always()
      with:
        sarif_file: trivy-results.sarif

  # Build application
  build:
    runs-on: ubuntu-latest
    needs: [security-checks, test]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        PUPPETEER_SKIP_DOWNLOAD: true
      
    - name: Build
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 30

  # Deploy to staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, build-and-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Deploy to staging
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        publish_branch: staging
        destination_dir: staging

  # Deploy to production (main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, build-and-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        publish_branch: gh-pages
        # cname: qrtak.app  # Uncomment if you get a custom domain 